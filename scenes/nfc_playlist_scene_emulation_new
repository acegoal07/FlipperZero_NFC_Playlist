#include "../nfc_playlist.h"

typedef enum {
   NfcPlaylistStep_None,
   NfcPlaylistStep_Delay,
   NfcPlaylistStep_Emulate,
   NfcPlaylistStep_Error,
   NfcPlaylistStep_Finished,
} NfcPlaylistStep;

typedef enum {
   NfcPlaylistEmulationState_Stopped,
   NfcPlaylistEmulationState_Emulating,
   NfcPlaylistEmulationState_Canceled
} NfcPlaylistEmulationState;

static NfcPlaylistStep step = NfcPlaylistStep_None;
static NfcPlaylistEmulationState EmulationState = NfcPlaylistEmulationState_Stopped;
static int countdown_ms = 0;
static bool delay_active = false;
static bool skip_delay = false;
static bool opened = false;
static Stream* stream = NULL;

static FuriString* line = NULL;
static FuriString* tmp_header_str = NULL;
static FuriString* tmp_counter_str = NULL;
static FuriString* tmp_file_name = NULL;
static FuriString* tmp_file_ext = NULL;

static void nfc_playlist_emulation_scene_ensure_strings(void) {
   if(!line) line = furi_string_alloc();
   if(!tmp_header_str) tmp_header_str = furi_string_alloc();
   if(!tmp_counter_str) tmp_counter_str = furi_string_alloc();
   if(!tmp_file_name) tmp_file_name = furi_string_alloc();
   if(!tmp_file_ext) tmp_file_ext = furi_string_alloc();
}

static void nfc_playlist_emulation_scene_reset_state(void) {
   step = NfcPlaylistStep_None;
   countdown_ms = 0;
   delay_active = false;
   skip_delay = false;
   opened = false;
   stream = NULL;
   if(line) furi_string_reset(line);
   if(tmp_header_str) furi_string_reset(tmp_header_str);
   if(tmp_counter_str) furi_string_reset(tmp_counter_str);
   if(tmp_file_name) furi_string_reset(tmp_file_name);
   if(tmp_file_ext) furi_string_reset(tmp_file_ext);
}

static bool nfc_playlist_emulation_scene_next_line(void) {
   nfc_playlist_emulation_scene_ensure_strings();
   while(stream && stream_read_line(stream, line) &&
         EmulationState == NfcPlaylistEmulationState_Emulating) {
      furi_string_trim(line);
      if(!furi_string_empty(line)) {
         return true;
      }
   }
   return false;
}

void nfc_playlist_emulation_scene_on_enter(void* context) {
   nfc_playlist_emulation_scene_ensure_strings();
   NfcPlaylist* nfc_playlist = context;
   Storage* storage = furi_record_open(RECORD_STORAGE);

   popup_set_context(nfc_playlist->views.popup, nfc_playlist);
   view_dispatcher_switch_to_view(nfc_playlist->view_dispatcher, NfcPlaylistView_Popup);

   nfc_playlist_emulation_scene_reset_state();

   if(nfc_playlist->settings.playlist_length == 0) {
      popup_set_header(
         nfc_playlist->views.popup,
         "The playlist you have\nselected is empty",
         64,
         5,
         AlignCenter,
         AlignTop);
      step = NfcPlaylistStep_Finished;
   } else {
      nfc_playlist->emulation_worker = nfc_playlist_emulation_worker_alloc();
      stream = file_stream_alloc(storage);
      if(stream && file_stream_open(
                      stream,
                      furi_string_get_cstr(nfc_playlist->settings.playlist_path),
                      FSAM_READ,
                      FSOM_OPEN_EXISTING)) {
         EmulationState = NfcPlaylistEmulationState_Emulating;
         opened = true;
         step = NfcPlaylistStep_None;
      } else {
         popup_set_header(
            nfc_playlist->views.popup, "Failed to open playlist", 64, 5, AlignCenter, AlignTop);
         step = NfcPlaylistStep_Finished;
      }
   }
   popup_set_text(nfc_playlist->views.popup, "Press back", 64, 50, AlignCenter, AlignTop);

   furi_record_close(RECORD_STORAGE);
}

bool nfc_playlist_emulation_scene_on_event(void* context, SceneManagerEvent event) {
   nfc_playlist_emulation_scene_ensure_strings();
   NfcPlaylist* nfc_playlist = context;
   bool consumed = false;

   if(event.type == SceneManagerEventTypeTick) {
      if(step == NfcPlaylistStep_Finished) return false;

      if(EmulationState != NfcPlaylistEmulationState_Emulating) {
         if(nfc_playlist->emulation_worker) {
            nfc_playlist_emulation_worker_stop(nfc_playlist->emulation_worker);
            nfc_playlist_emulation_worker_clear_nfc_data(nfc_playlist->emulation_worker);
         }
         step = NfcPlaylistStep_Finished;
         popup_reset(nfc_playlist->views.popup);
         popup_set_header(
            nfc_playlist->views.popup,
            EmulationState == NfcPlaylistEmulationState_Canceled ? "Emulation stopped" :
                                                                   "Emulation finished",
            64,
            5,
            AlignCenter,
            AlignTop);
         popup_set_text(nfc_playlist->views.popup, "Press back", 64, 50, AlignCenter, AlignTop);
         if(opened && stream) {
            nfc_playlist_led_worker_stop(nfc_playlist->notification_app);
            file_stream_close(stream);
            opened = false;
            stream = NULL;
         }
         consumed = true;
         return consumed;
      }

      if(EmulationState != NfcPlaylistEmulationState_Emulating) {
         step = NfcPlaylistStep_Finished;
         popup_reset(nfc_playlist->views.popup);
         popup_set_header(
            nfc_playlist->views.popup,
            EmulationState == NfcPlaylistEmulationState_Canceled ? "Emulation stopped" :
                                                                   "Emulation finished",
            64,
            5,
            AlignCenter,
            AlignTop);
         popup_set_text(nfc_playlist->views.popup, "Press back", 64, 50, AlignCenter, AlignTop);
         if(opened && stream) {
            nfc_playlist_led_worker_stop(nfc_playlist->notification_app);
            file_stream_close(stream);
            opened = false;
            stream = NULL;
         }
         consumed = true;
         return consumed;
      }

      switch(step) {
      case NfcPlaylistStep_None: {
         if(!nfc_playlist_emulation_scene_next_line()) {
            step = NfcPlaylistStep_Finished;
            popup_reset(nfc_playlist->views.popup);
            popup_set_header(
               nfc_playlist->views.popup, "Emulation finished", 64, 5, AlignCenter, AlignTop);
            popup_set_text(nfc_playlist->views.popup, "Press back", 64, 50, AlignCenter, AlignTop);
            nfc_playlist_led_worker_stop(nfc_playlist->notification_app);
            if(stream) file_stream_close(stream);
            opened = false;
            stream = NULL;
            EmulationState = NfcPlaylistEmulationState_Stopped;
            break;
         }
         path_extract_filename(line, tmp_file_name, false);
         path_extract_ext_str(line, tmp_file_ext);

         int emulate_timeout_ms =
            options_emulate_timeout[nfc_playlist->settings.emulate_timeout] * 1000;
         int delay_ms = options_emulate_delay[nfc_playlist->settings.emulate_delay] * 1000;

         // Delay logic
         if(nfc_playlist->settings.emulate_delay > 0) {
            if(delay_active && !skip_delay) {
               popup_set_header(
                  nfc_playlist->views.popup, "Delaying", 64, 5, AlignCenter, AlignTop);
               nfc_playlist_led_worker_start(
                  nfc_playlist->notification_app, NfcPlaylistLedState_Error);
               countdown_ms = delay_ms;
               step = NfcPlaylistStep_Delay;
               break;
            } else if(!delay_active) {
               delay_active = true;
            } else if(skip_delay) {
               skip_delay = false;
            }
         }

         // File extension check
         if(furi_string_cmpi_str(tmp_file_ext, ".nfc") != 0) {
            if(nfc_playlist->settings.skip_error) {
               skip_delay = true;
               break;
            }
            furi_string_printf(
               tmp_header_str,
               "ERROR invalid file type:\n%s",
               furi_string_get_cstr(tmp_file_name));
            popup_set_header(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_header_str),
               64,
               5,
               AlignCenter,
               AlignTop);
            nfc_playlist_led_worker_start(
               nfc_playlist->notification_app, NfcPlaylistLedState_Error);
            countdown_ms = emulate_timeout_ms;
            step = NfcPlaylistStep_Error;
            break;
         }

         // File existence check
         Storage* storage = furi_record_open(RECORD_STORAGE);
         if(!storage_file_exists(storage, furi_string_get_cstr(line))) {
            furi_record_close(RECORD_STORAGE);
            if(nfc_playlist->settings.skip_error) {
               skip_delay = true;
               break;
            }
            furi_string_printf(
               tmp_header_str, "ERROR file not found:\n%s", furi_string_get_cstr(tmp_file_name));
            popup_set_header(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_header_str),
               64,
               5,
               AlignCenter,
               AlignTop);
            nfc_playlist_led_worker_start(
               nfc_playlist->notification_app, NfcPlaylistLedState_Error);
            countdown_ms = emulate_timeout_ms;
            step = NfcPlaylistStep_Error;
            break;
         }
         furi_record_close(RECORD_STORAGE);

         // Set NFC data
         if(nfc_playlist_emulation_worker_set_nfc_data(
               nfc_playlist->emulation_worker, (char*)furi_string_get_cstr(line))) {
            if(nfc_playlist_emulation_worker_valid_protocol(nfc_playlist->emulation_worker)) {
               furi_string_printf(
                  tmp_header_str, "Emulating:\n%s", furi_string_get_cstr(tmp_file_name));
               popup_set_header(
                  nfc_playlist->views.popup,
                  furi_string_get_cstr(tmp_header_str),
                  64,
                  5,
                  AlignCenter,
                  AlignTop);
               nfc_playlist_emulation_worker_start(nfc_playlist->emulation_worker);
               nfc_playlist_led_worker_start(
                  nfc_playlist->notification_app, NfcPlaylistLedState_Normal);
               countdown_ms = emulate_timeout_ms;
               step = NfcPlaylistStep_Emulate;
            } else {
               nfc_playlist_emulation_worker_clear_nfc_data(nfc_playlist->emulation_worker);
               if(nfc_playlist->settings.skip_error) {
                  skip_delay = true;
                  break;
               }
               furi_string_printf(
                  tmp_header_str,
                  "ERROR invalid\nNFC protocol:\n%s",
                  furi_string_get_cstr(tmp_file_name));
               popup_set_header(
                  nfc_playlist->views.popup,
                  furi_string_get_cstr(tmp_header_str),
                  64,
                  5,
                  AlignCenter,
                  AlignTop);
               nfc_playlist_led_worker_start(
                  nfc_playlist->notification_app, NfcPlaylistLedState_Error);
               countdown_ms = emulate_timeout_ms;
               step = NfcPlaylistStep_Error;
            }
         } else {
            if(nfc_playlist->settings.skip_error) {
               skip_delay = true;
               break;
            }
            furi_string_printf(
               tmp_header_str,
               "ERROR failed to\nload NFC data:\n%s",
               furi_string_get_cstr(tmp_file_name));
            popup_set_header(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_header_str),
               64,
               5,
               AlignCenter,
               AlignTop);
            nfc_playlist_led_worker_start(
               nfc_playlist->notification_app, NfcPlaylistLedState_Error);
            countdown_ms = emulate_timeout_ms;
            step = NfcPlaylistStep_Error;
         }
         break;
      }
      case NfcPlaylistStep_Delay: {
         if(countdown_ms > 0) {
            furi_string_printf(tmp_counter_str, "%ds", (countdown_ms / 1000));
            popup_set_text(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_counter_str),
               64,
               50,
               AlignCenter,
               AlignTop);
            countdown_ms -= 50;
         } else {
            step = NfcPlaylistStep_None;
         }
         break;
      }
      case NfcPlaylistStep_Emulate: {
         if(nfc_playlist->emulation_worker &&
            nfc_playlist_emulation_worker_is_emulating(nfc_playlist->emulation_worker) &&
            countdown_ms > 0 && EmulationState == NfcPlaylistEmulationState_Emulating) {
            furi_string_printf(tmp_counter_str, "%ds", (countdown_ms / 1000));
            popup_set_text(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_counter_str),
               64,
               50,
               AlignCenter,
               AlignTop);
            countdown_ms -= 50;
         } else {
            if(nfc_playlist->emulation_worker) {
               nfc_playlist_emulation_worker_stop(nfc_playlist->emulation_worker);
               nfc_playlist_emulation_worker_clear_nfc_data(nfc_playlist->emulation_worker);
            }
            step = NfcPlaylistStep_None;
         }
         break;
      }
      case NfcPlaylistStep_Error: {
         if(countdown_ms > 0) {
            furi_string_printf(tmp_counter_str, "%ds", (countdown_ms / 1000));
            popup_set_text(
               nfc_playlist->views.popup,
               furi_string_get_cstr(tmp_counter_str),
               64,
               50,
               AlignCenter,
               AlignTop);
            countdown_ms -= 50;
         } else {
            step = NfcPlaylistStep_None;
         }
         break;
      }
      default:
         break;
      }
      consumed = true;
   } else if(
      event.type == SceneManagerEventTypeBack &&
      EmulationState == NfcPlaylistEmulationState_Emulating) {
      EmulationState = NfcPlaylistEmulationState_Canceled;
      if(nfc_playlist->emulation_worker) {
         nfc_playlist_emulation_worker_stop(nfc_playlist->emulation_worker);
         nfc_playlist_emulation_worker_clear_nfc_data(nfc_playlist->emulation_worker);
      }
      consumed = true;
   }
   return consumed;
}

void nfc_playlist_emulation_scene_on_exit(void* context) {
   NfcPlaylist* nfc_playlist = context;
   EmulationState = NfcPlaylistEmulationState_Stopped;
   popup_reset(nfc_playlist->views.popup);
   if(nfc_playlist->emulation_worker) {
      nfc_playlist_emulation_worker_free(nfc_playlist->emulation_worker);
      nfc_playlist->emulation_worker = NULL;
   }
   if(opened && stream) {
      nfc_playlist_led_worker_stop(nfc_playlist->notification_app);
      file_stream_close(stream);
      opened = false;
      stream = NULL;
   }
   if(line) {
      furi_string_free(line);
      line = NULL;
   }
   if(tmp_header_str) {
      furi_string_free(tmp_header_str);
      tmp_header_str = NULL;
   }
   if(tmp_counter_str) {
      furi_string_free(tmp_counter_str);
      tmp_counter_str = NULL;
   }
   if(tmp_file_name) {
      furi_string_free(tmp_file_name);
      tmp_file_name = NULL;
   }
   if(tmp_file_ext) {
      furi_string_free(tmp_file_ext);
      tmp_file_ext = NULL;
   }
}
